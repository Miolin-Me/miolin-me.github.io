{"meta":{"title":"Miolin's Blog","subtitle":"喵林Sama的博客","description":"","author":"Zelin.W","url":"http://miolin-me.github.io","root":"/"},"pages":[{"title":"about","date":"2023-11-01T08:21:06.000Z","updated":"2023-11-01T08:37:40.667Z","comments":false,"path":"about/index.html","permalink":"http://miolin-me.github.io/about/index.html","excerpt":"","text":""}],"posts":[{"title":"Markdown常用语法","slug":"Markdown常用语法","date":"2023-11-02T03:10:30.000Z","updated":"2023-11-02T09:24:53.806Z","comments":true,"path":"2023/11/02/Markdown常用语法/","link":"","permalink":"http://miolin-me.github.io/2023/11/02/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/","excerpt":"","text":"Markdown 常用语法1. 基本信息以本文为例，经过 hexo n &quot;Markdown常用语法&quot; 之后，.md文件中会生成基本信息如下： 123title: Markdown常用语法date: 2023-11-02 11:10:30tags: 可添加以下内容给文章分配标签和类别： 123456tags: - Markdown - Hexo - Typoracategories: - Blog 其中标签为 Markdown、Hexo、Typora 三个，类别为 Blog 2. 常用语法 标题标题以 # 表示，一级标题为 # ，二级标题为 ## ，以此类推最多六级标题 字体斜体 用一对 * 包围，粗体 用一对** 包围，斜粗体 用一对*** 包围。 线分割线，用三个及以上的+ 或-或 * 组成，我习惯使用三个- 表示分割线： 删除线 ，用一对 ~~ 包围文本来表示需要删除的文本 下划线 ，用HTML标签&lt;u&gt; &lt;/u&gt; 包围文本来表示下划线 列表 无序列表，使用一个 * 或 + 或 - 来表示，注意在符号后面添加一个空格 有序列表，使用数字加. 再加上一个空格表示 当然也可以将无序列表和有序列表组合作嵌套列表，子列表通过回车 + tab 键实现，供读者自己实验 区块使用&gt;加空格表示区块，一般用来引用别人的文章，可以在区块内继续加&gt; 加空格来表示嵌套区块： 这是一个区块 第二层嵌套区块 第三层嵌套区块 代码一行代码，用一对&#96;包围住表示 12345public static void main(String args[])&#123; System.out.println(&quot;一段代码用三个`加空格+具体编程语言名字来表示&quot;)； System.out.println(&quot;这段代码就是 ``` java 加回车后实现的&quot;)； System.out.println(&quot;也可以 ``` 直接回车后，打出代码段，然后在右下角选择编程语言&quot;)；&#125; 链接百度 使用[链接名](链接地址) 表示 http://www.baidu.com 使用&lt;链接地址&gt; 表示 图片 使用![图片属性名](图片相对地址/http地址)表示 注意：Typora可以使用 ctrl + c 和 ctrl + v 来直接复制粘贴图片 表格Markdown中使用 | 来分隔单元格，- 来分隔表头和其他行，例如： 1234|表头|表头|表头||---|---|---||单元格|单元格|单元格||单元格|单元格|单元格| 其中可以直接在 |表头| 后回车创建表格，然后点击表格，在Typora表格左上角设置具体多少行多少列： 表头 表头 表头 单元格 单元格 单元格 单元格 单元格 单元格 分隔符那一行，设置 :- 来表示整列左对齐，-:来表示右对齐，:-:来表示居中对齐，例如： 1234|左对齐|右对齐|中间对齐||:---|---:|:---:||单元格|单元格|单元格||单元格|单元格|单元格| 当然，也可以在Typora表格左上角手动设置 表情Markdown中的表情是使用:: 包围 emoji 代码来表示的。但是在hexo中需要安装插件并进行配置才能在网页中进行显示 首先，在本地blog目录下安装如下插件： 123npm install hexo-renderer-markdown-it --savenpm install markdown-it-emoji --savenpm install hexo-filter-emoji 然后，在 blog 根目录下的 _config,yml 中添加如下配置： 12345emoji: enable: true className: github-emoji styles: customEmojis: 最后，就可以使用诸如&#x1f62d;、&#x1f980; 、&#x26a0; 等表情了 emoji编码集合：https://www.webfx.com/tools/emoji-cheat-sheet/ 也可以参考博客：https://blog.juanertu.com/archives/f36eea83.html","categories":[{"name":"Blog","slug":"Blog","permalink":"http://miolin-me.github.io/categories/Blog/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://miolin-me.github.io/tags/Hexo/"},{"name":"Markdown","slug":"Markdown","permalink":"http://miolin-me.github.io/tags/Markdown/"},{"name":"Typora","slug":"Typora","permalink":"http://miolin-me.github.io/tags/Typora/"}]},{"title":"Hexo 安装和配置","slug":"Hexo安装和配置","date":"2023-11-01T07:21:33.000Z","updated":"2023-11-02T06:31:02.498Z","comments":true,"path":"2023/11/01/Hexo安装和配置/","link":"","permalink":"http://miolin-me.github.io/2023/11/01/Hexo%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/","excerpt":"","text":"Hexo 安装和配置本文教程用于博主本人回顾操作流程，主要面向MacOS系统进行安装和配置。 1. 运行环境 打开zsh，下载python：brew install python3 前往node官网下载最新版：node下载官网 检查node和npm是否安装成功：node -v npm -v 修改npm源地址：npm config set registry=https://registry.npmmirror.com/ npm安装hexo：npm install hexo-cli -g 经过以上几个步骤，hexo的运行环境和基础工具包已经具备 2. Hexo 初始配置 在本地需要放置博客的位置创建blog文件夹：mkdir blog 进入blog文件夹：cd blog 将blog初始化为hexo博客文件夹：hexo init 添加通过git上传本地文章的工具包：npm install hexo-deployer-git --save 删除&#x2F;blog&#x2F;source&#x2F;_post&#x2F;目录下的初始化文章：rm source/_post/Hello-world.md 创建自己第一篇文章，例如：hexo n &quot;Hexo 安装和配置&quot; 配置新文章：hexo g 本地启动hexo server：hexo s 之后打开 http://localhost:4000/ 即可查看自己的博客 3. GitHub Pages相关配置 本地安装git和ssh：brew install git ssh git配置用户名和邮箱地址: git config --global user.name &quot;your_name&quot; --global user.email &quot;your_email&quot; ssh生成本地公钥pub_key：ssh-keygen -t rsa -C &quot;your_email&quot; 在本地~&#x2F;.ssh目录下可以看到生成的公钥：cat ~/.ssh/id_rsa.pub 复制公钥，打开自己的github，右上角头像 setting -&gt; 左侧导航栏 SSH and GPG keys -&gt; 中间网页content的右上角 New SSH key -&gt; 填写 Title 并粘贴公钥到 key 中 -&gt; 点击Add SSH key完成配置 在~&#x2F;.ssh目录下创建config文件：touch ~/.ssh/config 将以下配置写入config中： 123Host GitHub.com Hostname ssh.github.com Port 443 本地机器与github建立连接：ssh -T git@github.com 出现下列信息代表连接github成功： Hi &#123;YourName&#125;! You&#39;ve successfully authenticated, but GitHub does not provide shell access. 在Github创建自己的公共项目: &#123;username&#125;/&#123;username&#125;.github.io 在项目Setting的左侧导航栏找到Pages，自行设置分支（github默认分支名main，可以根据实际情况更改成master） 在本地blog目录下上传自己的博客到github中: hexo d，等待上传成功即可 完成上述步骤后，刷新github页面，可以在setting中的GitHub Pages中可看到visit site 按钮，点击跳转可以看到部署在github上的博客 4. 主题和注意事项该博客所用主题为Fluid Fluid主题地址：https://github.com/fluid-dev/hexo-theme-fluid Fluid用户手册：https://hexo.fluid-dev.com/docs/ 注意事项 每次 hexo g 前建议 hexo clean 一下","categories":[{"name":"Blog","slug":"Blog","permalink":"http://miolin-me.github.io/categories/Blog/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://miolin-me.github.io/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"http://miolin-me.github.io/tags/GitHub/"},{"name":"SSH","slug":"SSH","permalink":"http://miolin-me.github.io/tags/SSH/"},{"name":"Fluid","slug":"Fluid","permalink":"http://miolin-me.github.io/tags/Fluid/"}]}],"categories":[{"name":"Blog","slug":"Blog","permalink":"http://miolin-me.github.io/categories/Blog/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://miolin-me.github.io/tags/Hexo/"},{"name":"Markdown","slug":"Markdown","permalink":"http://miolin-me.github.io/tags/Markdown/"},{"name":"Typora","slug":"Typora","permalink":"http://miolin-me.github.io/tags/Typora/"},{"name":"GitHub","slug":"GitHub","permalink":"http://miolin-me.github.io/tags/GitHub/"},{"name":"SSH","slug":"SSH","permalink":"http://miolin-me.github.io/tags/SSH/"},{"name":"Fluid","slug":"Fluid","permalink":"http://miolin-me.github.io/tags/Fluid/"}]}