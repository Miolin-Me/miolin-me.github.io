<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Markdown常用语法</title>
    <link href="/2023/11/02/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
    <url>/2023/11/02/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown-常用语法"><a href="#Markdown-常用语法" class="headerlink" title="Markdown 常用语法"></a>Markdown 常用语法</h1><h3 id="1-基本信息"><a href="#1-基本信息" class="headerlink" title="1. 基本信息"></a>1. 基本信息</h3><p>以本文为例，经过 <code>hexo n &quot;Markdown常用语法&quot;</code> 之后，.md文件中会生成基本信息如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">title: Markdown常用语法<br>date: 2023-11-02 11:10:30<br>tags:<br></code></pre></td></tr></table></figure><p>可添加以下内容给文章分配标签和类别：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">tags:<br><span class="hljs-bullet">  -</span> Markdown<br><span class="hljs-bullet">  -</span> Hexo<br><span class="hljs-bullet">  -</span> Typora<br>categories:<br><span class="hljs-bullet">  -</span> Blog<br></code></pre></td></tr></table></figure><p>其中标签为 <code>Markdown</code>、<code>Hexo</code>、<code>Typora</code> 三个，类别为 <code>Blog</code> </p><h3 id="2-常用语法"><a href="#2-常用语法" class="headerlink" title="2. 常用语法"></a>2. 常用语法</h3><ul><li><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>标题以 <code>#</code> 表示，一级标题为 <code>#</code> ，二级标题为 <code>##</code> ，以此类推最多六级标题</p></li><li><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><p><em>斜体</em> 用一对 <code>*</code> 包围，<strong>粗体</strong> 用一对<code>**</code> 包围，<em><strong>斜粗体</strong></em> 用一对<code>***</code> 包围。</p></li><li><h4 id="线"><a href="#线" class="headerlink" title="线"></a>线</h4><p>分割线，用三个及以上的<code>+</code> 或<code>-</code>或 <code>*</code> 组成，我习惯使用三个<code>-</code> 表示分割线：</p><hr><p><del>删除线</del> ，用一对 <code>~~</code> 包围文本来表示需要删除的文本</p><p><u>下划线</u> ，用HTML标签<code>&lt;u&gt;</code> <code>&lt;/u&gt;</code> 包围文本来表示下划线 </p></li><li><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><ul><li>无序列表，使用一个 <code>*</code> 或  <code>+</code> 或 <code>-</code> 来表示，注意在符号后面添加一个空格</li></ul><ol><li>有序列表，使用数字加<code>.</code> 再加上一个空格表示</li></ol><p>当然也可以将无序列表和有序列表组合作嵌套列表，子列表通过回车 + <code>tab</code> 键实现，供读者自己实验</p></li><li><h4 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h4><p>使用<code>&gt;</code>加空格表示区块，一般用来引用别人的文章，可以在区块内继续加<code>&gt;</code> 加空格来表示嵌套区块：</p><blockquote><p>这是一个区块</p><blockquote><p>第二层嵌套区块</p><blockquote><p>第三层嵌套区块</p></blockquote></blockquote></blockquote></li><li><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p><code>一行代码</code>，用一对&#96;包围住表示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;一段代码用三个`加空格+具体编程语言名字来表示&quot;</span>)；<br>      System.out.println(<span class="hljs-string">&quot;这段代码就是 ``` java 加回车后实现的&quot;</span>)；<br>      System.out.println(<span class="hljs-string">&quot;也可以 ``` 直接回车后，打出代码段，然后在右下角选择编程语言&quot;</span>)；<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p><a href="http://www.baidu.com/">百度</a> 使用<code>[链接名](链接地址)</code> 表示</p><p><a href="http://www.baidu.com/">http://www.baidu.com</a> 使用<code>&lt;链接地址&gt;</code> 表示</p></li><li><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p><img src="/./img/miao.jpeg" alt="log图片"></p><p>使用<code>![图片属性名](图片相对地址/http地址)</code>表示</p><p>注意：Typora可以使用 <code>ctrl + c</code> 和 <code>ctrl + v</code> 来直接复制粘贴图片</p></li><li><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><p>Markdown中使用 <code>|</code> 来分隔单元格，<code>-</code> 来分隔表头和其他行，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">|表头|表头|表头|<br>|---|---|---|<br>|单元格|单元格|单元格|<br>|单元格|单元格|单元格|<br></code></pre></td></tr></table></figure><p>其中可以直接在 <code>|表头|</code> 后回车创建表格，然后点击表格，在Typora表格左上角设置具体多少行多少列：</p><table><thead><tr><th>表头</th><th>表头</th><th align="left">表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td><td align="left">单元格</td></tr><tr><td>单元格</td><td>单元格</td><td align="left">单元格</td></tr></tbody></table><p>分隔符那一行，设置 <code>:-</code> 来表示整列左对齐，<code>-:</code>来表示右对齐，<code>:-:</code>来表示居中对齐，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">|左对齐|右对齐|中间对齐|<br>|:---|---:|:---:|<br>|单元格|单元格|单元格|<br>|单元格|单元格|单元格|<br></code></pre></td></tr></table></figure></li></ul><p>​当然，也可以在Typora表格左上角手动设置</p><ul><li><h4 id="表情"><a href="#表情" class="headerlink" title="表情"></a>表情</h4><p>Markdown中的表情是使用<code>::</code> 包围 <code>emoji</code> 代码来表示的。但是在hexo中需要安装插件并进行配置才能在网页中进行显示</p><ul><li>首先，在本地blog目录下安装如下插件：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-renderer-markdown-it --save<br>npm install markdown-it-emoji --save<br>npm install hexo-filter-emoji<br></code></pre></td></tr></table></figure><ul><li>然后，在 blog 根目录下的 _config,yml 中添加如下配置：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">emoji:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">className:</span> <span class="hljs-string">github-emoji</span><br>  <span class="hljs-attr">styles:</span><br>  <span class="hljs-attr">customEmojis:</span><br></code></pre></td></tr></table></figure><ul><li>最后，就可以使用诸如<span class="github-emoji" alias="sob" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8">&#x1f62d;</span>、<span class="github-emoji" alias="crab" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f980.png?v8">&#x1f980;</span> 、<span class="github-emoji" alias="warning" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8">&#x26a0;</span> 等表情了</li></ul><p>emoji编码集合：<a href="https://www.webfx.com/tools/emoji-cheat-sheet/">https://www.webfx.com/tools/emoji-cheat-sheet/</a> </p><p>也可以参考博客：<a href="https://blog.juanertu.com/archives/f36eea83.html">https://blog.juanertu.com/archives/f36eea83.html</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Markdown</tag>
      
      <tag>Typora</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 安装和配置</title>
    <link href="/2023/11/01/Hexo%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/11/01/Hexo%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo-安装和配置"><a href="#Hexo-安装和配置" class="headerlink" title="Hexo 安装和配置"></a>Hexo 安装和配置</h1><p>本文教程用于博主本人回顾操作流程，主要面向MacOS系统进行安装和配置。</p><h3 id="1-运行环境"><a href="#1-运行环境" class="headerlink" title="1. 运行环境"></a>1. 运行环境</h3><ul><li>打开zsh，下载python：<code>brew install python3</code></li><li>前往node官网下载最新版：<a href="https://nodejs.org/en">node下载官网</a></li><li>检查node和npm是否安装成功：<code>node -v</code> <code>npm -v</code></li><li>修改npm源地址：<code>npm config set registry=https://registry.npmmirror.com/</code></li><li>npm安装hexo：<code>npm install hexo-cli -g</code></li></ul><p>经过以上几个步骤，hexo的运行环境和基础工具包已经具备</p><h3 id="2-Hexo-初始配置"><a href="#2-Hexo-初始配置" class="headerlink" title="2. Hexo 初始配置"></a>2. Hexo 初始配置</h3><ul><li>在本地需要放置博客的位置创建blog文件夹：<code>mkdir blog</code></li><li>进入blog文件夹：<code>cd blog</code></li><li>将blog初始化为hexo博客文件夹：<code>hexo init</code></li><li>添加通过git上传本地文章的工具包：<code>npm install hexo-deployer-git --save</code></li><li>删除&#x2F;blog&#x2F;source&#x2F;_post&#x2F;目录下的初始化文章：<code>rm source/_post/Hello-world.md</code></li><li>创建自己第一篇文章，例如：<code>hexo n &quot;Hexo 安装和配置&quot;</code></li><li>配置新文章：<code>hexo g</code></li><li>本地启动hexo server：<code>hexo s</code></li></ul><p>之后打开 <a href="http://localhost:4000/">http://localhost:4000/</a> 即可查看自己的博客</p><h3 id="3-GitHub-Pages相关配置"><a href="#3-GitHub-Pages相关配置" class="headerlink" title="3. GitHub Pages相关配置"></a>3. GitHub Pages相关配置</h3><ul><li><p>本地安装git和ssh：<code>brew install git ssh</code></p></li><li><p>git配置用户名和邮箱地址: <code>git config --global user.name &quot;your_name&quot; --global user.email &quot;your_email&quot;</code></p></li><li><p>ssh生成本地公钥pub_key：<code>ssh-keygen -t rsa -C &quot;your_email&quot;</code></p></li><li><p>在本地~&#x2F;.ssh目录下可以看到生成的公钥：<code>cat ~/.ssh/id_rsa.pub</code></p></li><li><p>复制公钥，打开自己的github，右上角头像 setting -&gt; 左侧导航栏 SSH and GPG keys -&gt; 中间网页content的右上角 New SSH key -&gt; 填写 Title 并粘贴公钥到 key 中 -&gt; 点击Add SSH key完成配置</p></li><li><p>在~&#x2F;.ssh目录下创建config文件：<code>touch ~/.ssh/config</code></p></li><li><p>将以下配置写入config中：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Host GitHub<span class="hljs-selector-class">.com</span><br>Hostname ssh<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.com</span><br>Port <span class="hljs-number">443</span><br></code></pre></td></tr></table></figure></li><li><p>本地机器与github建立连接：<code>ssh -T git@github.com</code>  出现下列信息代表连接github成功：</p><p><code>Hi &#123;YourName&#125;! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></p></li><li><p>在Github创建自己的公共项目: <code>&#123;username&#125;/&#123;username&#125;.github.io</code> </p></li><li><p>在项目Setting的左侧导航栏找到Pages，自行设置分支（github默认分支名main，可以根据实际情况更改成master）</p></li><li><p>在本地blog目录下上传自己的博客到github中: <code>hexo d</code>，等待上传成功即可</p></li></ul><p>完成上述步骤后，刷新github页面，可以在setting中的GitHub Pages中可看到visit site 按钮，点击跳转可以看到部署在github上的博客 </p><h3 id="4-主题和注意事项"><a href="#4-主题和注意事项" class="headerlink" title="4. 主题和注意事项"></a>4. 主题和注意事项</h3><h5 id="该博客所用主题为Fluid"><a href="#该博客所用主题为Fluid" class="headerlink" title="该博客所用主题为Fluid"></a>该博客所用主题为Fluid</h5><ul><li><p>Fluid主题地址：<a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a> </p></li><li><p>Fluid用户手册：<a href="https://hexo.fluid-dev.com/docs/">https://hexo.fluid-dev.com/docs/</a></p></li></ul><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>每次 <code>hexo g</code> 前建议 <code>hexo clean</code> 一下</li></ul>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>GitHub</tag>
      
      <tag>SSH</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
